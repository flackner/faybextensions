{
  "name": "faybcontrol",
  "displayName": "faybcontrol",
  "description": "wild look",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [ ],
  "main": "./extension.js",
  "contributes": {
    "commands": [
      {
        "command": "faybcontrol.selectLineWithPreviousBreakDown",
        "title": "Select Line With Previous Break down"
      },
      {
        "command": "faybcontrol.selectLineWithPreviousBreakUp",
        "title": "Select Line With Previous Break up"
      },
      {
        "command": "faybcontrol.lookUp",
        "title": "look up to Cursor"
      },
      {
        "command": "faybcontrol.lookDown",
        "title": "look down to Cursor"
      },
      {
        "command": "faybcontrol.lookMiddle",
        "title": "look middle to Cursor"
      },
      {
        "command": "faybcontrol.moveDown",
        "title": "move down to Cursor"
      },
      {
        "command": "faybcontrol.moveUp",
        "title": "move up to Cursor"
      },
      {
        "command": "faybcontrol.scrollDown",
        "title": "scroll down"
      },
      {
        "command": "faybcontrol.scrollUp",
        "title": "scroll up"
      },
      {
        "command": "faybcontrol.scrollFastDown",
        "title": "scroll down"
      },
      {
        "command": "faybcontrol.scrollFastUp",
        "title": "scroll up"
      },
      {
        "command": "faybcontrol.placeCursorDown",
        "title": "place cursor down"
      },
      {
        "command": "faybcontrol.placeCursorUp",
        "title": "place cursor up"
      },
      {
        "command": "faybcontrol.placeCursorMiddle",
        "title": "place cursor middle of page"
      },
      {
        "command": "faybcontrol.moveCursorConditionalDown",
        "title": "move cursor conditional down"
      },
      {
        "command": "faybcontrol.moveCursorConditionalUp",
        "title": "move cursor conditional up"
      },
      {
        "command": "faybcontrol.startScrollDown",
        "title": "start scroll down"
      },
      {
        "command": "faybcontrol.startScrollUp",
        "title": "start scroll up"
      },
      {
        "command": "faybcontrol.stopScrolling",
        "title": "stop scrolling"
      },
      {
        "command": "faybcontrol.revealCellAtTop",
        "title": "notebook cell reveal at top"
      },
      {
        "command": "faybcontrol.revealCellInCenter",
        "title": "notebook cell reveal in center"
      },
      {
        "command": "faybcontrol.cellScrollDown",
        "title": "notebook cell scroll down"
      },
      {
        "command": "faybcontrol.cellScrollUp",
        "title": "notebook cell scroll up"
      },
      {
        "command": "faybcontrol.selectCellAtTop",
        "title": "notebook cell select at top"
      }
    ],
    "configuration": [
      {
        "title": "faybcontrol",
        "properties": {
          "faybcontrol.offset": {
            "type": "number",
            "default": "0",
            "description": "Offset when looking up/down"
          },
          "faybcontrol.distance": {
            "type": "number",
            "default": "10",
            "description": "Amount of distance to scroll"
          },
          "faybcontrol.scrollDistance": {
            "type": "number",
            "default": "200",
            "description": "Amount of distance to smooth scroll"
          }
        }
      }
    ],
    "keybindings": [
      {
        "key": "alt+left",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
      },
      {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
      },
      {
        "key": "alt+right",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
      },
      {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
      },
      {
        "key": "f8",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
      },
      {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
      },
      {
        "key": "f8",
        "command": "debug.openView",
        "when": "!debuggersAvailable"
      },
      {
        "key": "f5",
        "command": "-debug.openView",
        "when": "!debuggersAvailable"
      },
      {
        "key": "f8",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f5",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
      },
      {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
      },
      {
        "key": "f6",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f7",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
      },
      {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
      },
      {
        "key": "f9",
        "command": "editor.debug.action.runToCursor"
      },
      {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
      },
      {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
      },
      {
        "key": "alt+f3",
        "command": "search.action.openEditor"
      },
      {
        "key": "ctrl+alt+meta+n",
        "command": "-welcome.showNewFileEntries"
      },
      {
        "key": "pageup",
        "command": "faybcontrol.startScrollUp",
        "when": "editorTextFocus"
      },
      {
        "key": "pagedown",
        "command": "faybcontrol.startScrollDown",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+shift+pageup",
        "command": "cursorMove",
        "args": {
          "to": "up",
          "by": "wrappedLine",
          "value": 3,
          "select": true
        },
        "when": "editorTextFocus"
      },
      {
        "key": "alt+shift+pagedown",
        "command": "cursorMove",
        "args": {
          "to": "down",
          "by": "wrappedLine",
          "value": 3,
          "select": true
        },
        "when": "editorTextFocus"
      },
      {
        "key": "alt+pageup",
        "command": "faybcontrol.moveCursorConditionalUp",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+pagedown",
        "command": "faybcontrol.moveCursorConditionalDown",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+down",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
      },
      {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
      },
      {
        "key": "ctrl+alt+up",
        "command": "editor.action.moveSelectionToPreviousFindMatch"
      },
      {
        "key": "ctrl+enter",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
      },
      {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
      },
      {
        "key": "alt+home",
        "command": "editor.action.commentLine"
      },
      {
        "key": "ctrl+shift+oem_period",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
      },
      {
        "key": "t",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "r",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "s",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "r",
        "command": "list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
      },
      {
        "key": "left",
        "command": "-list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus"
      },
      {
        "key": "t",
        "command": "list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
      },
      {
        "key": "right",
        "command": "-list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus"
      },
      {
        "key": "s",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "down",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "c",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "up",
        "command": "-list.focusUp",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "c",
        "command": "multiCommand.upWithFocus",
        "when": "listFocus && !inputFocus && focusedView == 'outline'"
      },
      {
        "key": "s",
        "command": "multiCommand.downWithFocus",
        "when": "listFocus && !inputFocus && focusedView == 'outline'"
      },
      {
        "key": "c",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus && focusedView == 'outline'"
      },
      {
        "key": "s",
        "command": "-list.focusUp",
        "when": "listFocus && !inputFocus && focusedView == 'outline'"
      },
      {
        "key": "alt+pageup",
        "command": "-scrollPageUp",
        "when": "textInputFocus"
      },
      {
        "key": "alt+pagedown",
        "command": "-scrollPageDown",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
      },
      {
        "key": "ctrl+shift+alt+home",
        "command": "editor.action.moveCarretLeftAction"
      },
      {
        "key": "ctrl+shift+alt+end",
        "command": "editor.action.moveCarretRightAction"
      },
      {
        "key": "ctrl+up",
        "command": "faybcontrol.lookDown"
      },
      {
        "key": "ctrl+down",
        "command": "faybcontrol.scrollDown"
      },
      {
        "key": "ctrl+n",
        "command": "workbench.action.focusFirstEditorGroup"
      },
      {
        "key": "ctrl+m",
        "command": "workbench.action.moveEditorToPreviousGroup"
      },
      {
        "key": "ctrl+i",
        "command": "workbench.action.focusSecondEditorGroup"
      },
      {
        "key": "ctrl+o",
        "command": "workbench.action.moveEditorToNextGroup"
      },
      {
        "key": "ctrl+e",
        "command": "workbench.action.showAllEditors"
      },
      {
        "key": "ctrl+h",
        "command": "workbench.action.focusPanel"
      },
      {
        "key": "ctrl+pageup",
        "command": "workbench.action.previousPanelView"
      },
      {
        "key": "ctrl+pagedown",
        "command": "workbench.action.nextPanelView"
      },
      {
        "key": "ctrl+shift+1",
        "command": "workbench.action.previousAuxiliaryBarView"
      },
      {
        "key": "ctrl+shift+2",
        "command": "workbench.action.nextAuxiliaryBarView"
      },
      {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
      },
      {
        "key": "ctrl+1",
        "command": "multiCommand.focusFirstEditorGroup"
      },
      {
        "key": "ctrl+2",
        "command": "multiCommand.focusSecondEditorGroup"
      },
      {
        "key": "ctrl+3",
        "command": "workbench.action.toggleMaximizedPanel"
      },
      {
        "key": "ctrl+4",
        "command": "workbench.action.toggleSidebarVisibility"
      },
      {
        "key": "ctrl+shift+alt+insert",
        "command": "workbench.action.focusAuxiliaryBar"
      },
      {
        "key": "ctrl+5",
        "command": "workbench.action.toggleActivityBarVisibility"
      },
      {
        "key": "ctrl+6",
        "command": "workbench.action.toggleAuxiliaryBar"
      },
      {
        "key": "ctrl+l",
        "command": "faybcontrol.lookMiddle"
      },
      {
        "key": "ctrl+7",
        "command": "workbench.action.toggleStatusbarVisibility"
      },
      {
        "key": "ctrl+8",
        "command": "workbench.action.focusTitleBar"
      },
      {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
      },
      {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
      },
      {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
      },
      {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
      },
      {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
      },
      {
        "key": "ctrl+u",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
      },
      {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+s",
        "command": "workbench.action.quickOpenNavigateNext",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+c",
        "command": "workbench.action.quickOpenNavigatePrevious",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
      },
      {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
      },
      {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
      },
      {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
      },
      {
        "key": "ctrl+j",
        "command": "editor.action.commentLine"
      },
      {
        "key": "alt+home",
        "command": "-editor.action.commentLine"
      },
      {
        "key": "alt+end",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
      },
      {
        "key": "alt+home",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
      },
      {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+shift+d",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
      },
      {
        "key": "ctrl+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
      },
      {
        "key": "ctrl+alt+x",
        "command": "editor.action.selectToBracket"
      },
      {
        "key": "ctrl+alt+pageup",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+k ctrl+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+pagedown",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
      },
      {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
      },
      {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
      },
      {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
      },
      {
        "key": "ctrl+shift+b",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+shift+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
      },
      {
        "key": "shift+alt+b",
        "command": "workbench.action.gotoSymbol"
      },
      {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.openRecent"
      },
      {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
      },
      {
        "key": "ctrl+q",
        "command": "workbench.action.findInFiles"
      },
      {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
      },
      {
        "key": "ctrl+r",
        "command": "workbench.action.replaceInFiles"
      },
      {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
      },
      {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
      },
      {
        "key": "ctrl+t",
        "command": "workbench.action.showCommands"
      },
      {
        "key": "f1",
        "command": "-workbench.action.showCommands"
      },
      {
        "key": "ctrl+d",
        "command": "editor.action.startFindReplaceAction"
      },
      {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction"
      },
      {
        "key": "ctrl+b",
        "command": "workbench.action.quickOpen",
        "args": "?"
      },
      {
        "key": "ctrl+up",
        "command": "workbench.action.increaseViewSize",
        "when": "!isAuxiliaryWindowFocusedContext"
      },
      {
        "key": "ctrl+down",
        "command": "workbench.action.decreaseViewSize",
        "when": "!isAuxiliaryWindowFocusedContext"
      },
      {
        "key": "ctrl+alt+b",
        "command": "faybcontrol.placeCursorMiddle",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+t",
        "command": "editor.action.jumpToBracket"
      },
      {
        "key": "ctrl+alt+home",
        "command": "-editor.action.jumpToBracket"
      },
      {
        "key": "ctrl+alt+w",
        "command": "workbench.action.navigateToLastEditLocation"
      },
      {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
      },
      {
        "key": "ctrl+alt+home",
        "command": "faybcontrol.selectLineWithPreviousBreakUp",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+end",
        "command": "faybcontrol.selectLineWithPreviousBreakDown",
        "when": "editorTextFocus"
      },
      {
        "key": "ctrl+alt+insert",
        "command": "search.action.focusSearchList"
      },
      {
        "key": "ctrl+alt+tab",
        "command": "github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
      },
      {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
      },
      {
        "key": "ctrl+alt+v",
        "command": "workbench.action.chat.startVoiceChat",
        "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress"
      },
      {
        "key": "ctrl+i",
        "command": "-workbench.action.chat.startVoiceChat",
        "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress"
      },
      {
        "key": "ctrl+tab",
        "command": "chatEditor.action.accept",
        "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress"
      },
      {
        "key": "ctrl+enter",
        "command": "-chatEditor.action.accept",
        "when": "chatEdits.hasEditorModifications && editorFocus && !chatEdits.isRequestInProgress"
      },
      {
        "key": "ctrl+i",
        "command": "-inlineChat.start",
        "when": "editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly && !editorSimpleInput"
      },
      {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
      },
      {
        "key": "ctrl+f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
      },
      {
        "key": "ctrl+shift+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      },
      {
        "key": "ctrl+shift+f10",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      },
      {
        "key": "ctrl+alt+enter",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
      },
      {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
      },
      {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
      },
      {
        "key": "f12",
        "command": "editor.action.peekDefinition"
      },
      {
        "key": "alt+f12",
        "command": "editor.action.peekDeclaration"
      },
      {
        "key": "ctrl+f12",
        "command": "editor.action.referenceSearch.trigger"
      },
      {
        "key": "ctrl+tab",
        "command": "inlineChat.acceptChanges",
        "when": "inlineChatHasProvider && inlineChatVisible"
      },
      {
        "key": "ctrl+enter",
        "command": "-inlineChat.acceptChanges",
        "when": "inlineChatHasProvider && inlineChatVisible"
      },
      {
        "key": "shift+alt+h",
        "command": "-editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
      },
      {
        "key": "ctrl+alt+meta+p",
        "command": "references-view.showIncomingCalls"
      },
      {
        "key": "ctrl+shift+alt+meta+p",
        "command": "references-view.showOutgoingCalls"
      },
      {
        "key": "pageup",
        "command": "faybcontrol.cellScrollUp",
        "when": "notebookEditorFocused"
      },
      {
        "key": "pagedown",
        "command": "faybcontrol.cellScrollDown",
        "when": "notebookEditorFocused"
      },
      {
        "key": "ctrl+down",
        "command": "faybcontrol.revealCellAtTop",
        "when": "notebookEditorFocused"
      },
      {
        "key": "ctrl+alt+b",
        "command": "faybcontrol.selectCellAtTop",
        "when": "notebookEditorFocused"
      },
      {
        "key": "alt+pageup",
        "command": "notebook.focusPreviousEditor",
        "when": "notebookEditorFocused"
      },
      {
        "key": "alt+pagedown",
        "command": "notebook.focusNextEditor",
        "when": "notebookEditorFocused"
      },
      {
        "key": "ctrl+e",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
      },
      {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
      },
      {
        "key": "ctrl+u",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
      },
      {
        "key": "ctrl+pageup",
        "command": "-workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
      },
      {
        "key": "ctrl+o",
        "command": "workbench.action.terminal.newInActiveWorkspace",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
      }
    ]
  }
}
